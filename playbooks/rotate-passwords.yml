---
- name: Rotate Windows Service Account Passwords using Vault
  hosts: windows_servers
  gather_facts: false
  vars:
    # SSH connection using proven working configuration
    ansible_connection: ssh
    ansible_shell_type: cmd
    ansible_port: 22
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    
    # Vault configuration
    vault_addr: "{{ vault_url | default('https://vault.hashicorp.local:8200') }}"
    vault_ldap_mount: "{{ vault_ldap_mount_path | default('ldap') }}"
    vault_static_role: "{{ vault_static_role_name | default('svc_demo') }}"
    
    # Service configuration - can be overridden via extra variables
    service_account: "{{ vault_service_account | default('hashicorp.local\\svc-demo') }}"
    dependent_services: "{{ services_to_restart | default(['DemoHelloWorldService']) }}"
    
  pre_tasks:
    # Vault connectivity and authentication checks (similar to vault_sign role)
    - name: Ensure Vault address is defined
      ansible.builtin.assert:
        that:
          - vault_addr is defined
          - vault_addr | length > 0
        fail_msg: "Vault address is not set or is empty!"

    - name: Ensure Vault authentication credentials are defined
      ansible.builtin.assert:
        that:
          - role_id is defined
          - role_id | length > 0
          - secret_id is defined
          - secret_id | length > 0
        fail_msg: "Vault AppRole authentication credentials (role_id or secret_id) are not set!"

    - name: Test Vault connectivity
      ansible.builtin.uri:
        url: "{{ vault_addr }}/v1/sys/health"
        method: GET
        return_content: true
        validate_certs: true
        ca_path: "/etc/pki/ca-trust/source/anchors/vault-ca.crt"
      register: vault_health
      delegate_to: localhost
      retries: 3
      delay: 5

  tasks:
    - name: Get current service account credentials from Vault LDAP static role
      community.hashi_vault.vault_read:
        url: "{{ vault_addr }}"
        path: "{{ vault_ldap_mount }}/static-cred/{{ vault_static_role }}"
        auth_method: approle
        role_id: "{{ role_id }}"
        secret_id: "{{ secret_id }}"
        validate_certs: true
        ca_cert: "/etc/pki/ca-trust/source/anchors/vault-ca.crt"
      register: vault_credentials
      delegate_to: localhost
      run_once: true

    - name: Extract current password from Vault response
      ansible.builtin.set_fact:
        current_username: "{{ vault_credentials.data.username }}"
        current_password: "{{ vault_credentials.data.password }}"
        last_vault_rotation: "{{ vault_credentials.data.last_vault_rotation | default('unknown') }}"
      delegate_to: localhost
      run_once: true

    - name: Display credential info (username only for security)
      ansible.builtin.debug:
        msg: 
          - "Retrieved current credentials for user: {{ current_username }}"
          - "Last Vault rotation: {{ last_vault_rotation }}"

    - name: Check current service status before password rotation
      ansible.builtin.raw: |
        powershell.exe -Command "Get-Service -Name '{{ item }}' | Select-Object Name, Status | ConvertTo-Json"
      loop: "{{ dependent_services }}"
      register: pre_rotation_status
      changed_when: false

    - name: Display pre-rotation service status in readable format
      ansible.builtin.debug:
        msg: |
          Before rotation:
          Service: {{ item.item }}
          Status: {{ 'Running' if (item.stdout | from_json).Status == 4 else 'Stopped' if (item.stdout | from_json).Status == 1 else 'Unknown (' + ((item.stdout | from_json).Status | string) + ')' }}
      loop: "{{ pre_rotation_status.results }}"
      when: item.stdout is defined

    - name: Update service account credentials using NSSM
      ansible.builtin.raw: |
        powershell.exe -Command "
        $NSSMPath = 'C:\nssm\nssm.exe';
        if (Test-Path $NSSMPath) {
          Write-Host 'Updating NSSM service {{ item }} with current Vault credentials';
          & $NSSMPath set '{{ item }}' ObjectName '{{ service_account }}' '{{ current_password }}';
          Write-Host 'Successfully updated NSSM service {{ item }} credentials'
        } else {
          Write-Host 'NSSM not found at C:\nssm\nssm.exe, skipping service {{ item }}'
        }
        "
      loop: "{{ dependent_services }}"
      register: nssm_update_result
      no_log: true

    - name: Display NSSM update results
      ansible.builtin.debug:
        msg: "{{ item.stdout_lines }}"
      loop: "{{ nssm_update_result.results }}"
      when: nssm_update_result is defined

    - name: Restart dependent services to apply new credentials
      ansible.builtin.raw: |
        powershell.exe -Command "
        Write-Host 'Restarting service: {{ item }}';
        Restart-Service -Name '{{ item }}' -Force;
        Start-Sleep -Seconds 3;
        Write-Host 'Service {{ item }} restart completed'
        "
      loop: "{{ dependent_services }}"
      register: restart_results

    - name: Display restart results
      ansible.builtin.debug:
        msg: "{{ item.stdout_lines }}"
      loop: "{{ restart_results.results }}"
      when: restart_results is defined

    - name: Verify service status after credential update
      ansible.builtin.raw: |
        powershell.exe -Command "Get-Service -Name '{{ item }}' | Select-Object Name, Status | ConvertTo-Json"
      loop: "{{ dependent_services }}"
      register: post_rotation_status
      changed_when: false

    - name: Display post-rotation service status in readable format
      ansible.builtin.debug:
        msg: |
          After credential update:
          Service: {{ item.item }}
          Status: {{ 'Running' if (item.stdout | from_json).Status == 4 else 'Stopped' if (item.stdout | from_json).Status == 1 else 'Unknown (' + ((item.stdout | from_json).Status | string) + ')' }}
      loop: "{{ post_rotation_status.results }}"
      when: item.stdout is defined

    - name: Check service log to verify it's working with new credentials
      ansible.builtin.raw: |
        powershell.exe -Command "
        if (Test-Path 'C:\demo-service\demo-service.log') {
          Write-Host 'Recent log entries:';
          Get-Content 'C:\demo-service\demo-service.log' | Select-Object -Last 5
        } else {
          Write-Host 'Service log file not found at C:\demo-service\demo-service.log'
        }
        "
      register: service_log_check
      changed_when: false

    - name: Display recent service log entries
      ansible.builtin.debug:
        msg: "{{ service_log_check.stdout_lines }}"

  post_tasks:
    - name: Password rotation summary
      ansible.builtin.debug:
        msg: 
          - "Service account credential update completed successfully"
          - "Service account: {{ service_account }}"
          - "Username from Vault: {{ current_username }}"
          - "Services updated: {{ dependent_services | join(', ') }}"
          - "Host: {{ inventory_hostname }}"
          - "Vault LDAP role: {{ vault_static_role }}"
          - "Last Vault rotation: {{ last_vault_rotation }}"
