---
# roles/windows_service_credential_update/tasks/main.yml

- name: Ensure required variables are defined
  ansible.builtin.assert:
    that:
      - dependent_services is defined
      - dependent_services | length > 0
      - service_account is defined
      - current_password is defined
    fail_msg: "Required variables not defined: dependent_services, service_account, current_password"

- name: Check current service status before password rotation
  ansible.builtin.raw: |
    powershell.exe -Command "Get-Service -Name '{{ item }}' | Select-Object Name, Status | ConvertTo-Json"
  loop: "{{ dependent_services }}"
  register: pre_rotation_status
  changed_when: false

- name: Display pre-rotation service status in readable format
  ansible.builtin.debug:
    msg:
      - "Before credential rotation:"
      - "Service: {{ item.item }}"
      - "Raw Status: {{ status_raw }}"
      - "Status: {{ status_text }}"
      - "Host: {{ inventory_hostname }}"
  vars:
    status_raw: "{{ (item.stdout | from_json).Status }}"
    status_text: >-
      {% if status_raw | int == 4 %}Running
      {% elif status_raw | int == 1 %}Stopped
      {% else %}Other ({{ status_raw }})
      {% endif %}
  loop: "{{ pre_rotation_status.results }}"
  when: item.stdout is defined

- name: Debug credential values before NSSM update
  ansible.builtin.debug:
    msg:
      - "Service: {{ item }}"
      - "Service Account: {{ service_account | default('UNDEFINED') }}"
      - "Password defined: {{ 'Yes' if current_password is defined else 'No' }}"
      - "Password length: {{ current_password | default('') | length }}"
  loop: "{{ dependent_services }}"

- name: Create PowerShell script for NSSM update
  ansible.builtin.raw: |
    $script = @"
    `$ServiceName = '{{ item }}'
    `$ServiceAccount = '{{ service_account_full }}'
    `$Password = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('{{ current_password | b64encode }}'))
    Write-Host "Debug: Service=`$ServiceName, Account=`$ServiceAccount, PasswordLength=" `$Password.Length
    if (Test-Path 'C:\nssm\nssm.exe') {
      Write-Host "Updating NSSM service `$ServiceName with current Vault credentials"
      & 'C:\nssm\nssm.exe' set `$ServiceName ObjectName `$ServiceAccount `$Password
      if (`$LASTEXITCODE -eq 0) {
        Write-Host "Successfully updated NSSM service `$ServiceName credentials"
      } else {
        Write-Host "NSSM update failed with exit code `$LASTEXITCODE"
      }
    } else {
      Write-Host "NSSM not found, skipping service `$ServiceName"
    }
    "@
    powershell.exe -Command $script
  vars:
    service_account_full: "{{ service_account if ('\\\\' in service_account or '@' in service_account) else 'hashicorp.local\\\\' + service_account }}"
  loop: "{{ dependent_services }}"
  register: nssm_update_result
  changed_when: true

- name: Display NSSM update results
  ansible.builtin.debug:
    msg: "{{ item.stdout_lines }}"
  loop: "{{ nssm_update_result.results }}"
  when: nssm_update_result is defined

- name: Restart dependent services to apply new credentials
  ansible.builtin.raw: |
    powershell.exe -Command "
    Write-Host 'Restarting service: {{ item }}';
    Restart-Service -Name '{{ item }}' -Force;
    Start-Sleep -Seconds 3;
    Write-Host 'Service {{ item }} restart completed'
    "
  loop: "{{ dependent_services }}"
  register: restart_results
  changed_when: true

- name: Display restart results
  ansible.builtin.debug:
    msg: "{{ item.stdout_lines }}"
  loop: "{{ restart_results.results }}"
  when: restart_results is defined

- name: Verify service status after credential update
  ansible.builtin.raw: |
    powershell.exe -Command "Get-Service -Name '{{ item }}' | Select-Object Name, Status | ConvertTo-Json"
  loop: "{{ dependent_services }}"
  register: post_rotation_status
  changed_when: false

- name: Display post-rotation service status in readable format
  ansible.builtin.debug:
    msg:
      - "After credential update:"
      - "Service: {{ item.item }}"
      - "Status: {{ status_display }}"
      - "Host: {{ inventory_hostname }}"
  vars:
    status_int: "{{ (item.stdout | from_json).Status }}"
    status_display: >-
      {% if status_int | int == 4 %}Running
      {% elif status_int | int == 1 %}Stopped
      {% else %}Other ({{ status_int }})
      {% endif %}
  loop: "{{ post_rotation_status.results }}"
  when: item.stdout is defined

- name: Check service log to verify it's working with new credentials
  ansible.builtin.raw: |
    powershell.exe -Command "
    if (Test-Path 'C:\demo-service\demo-service.log') {
      Write-Host 'Recent log entries:';
      Get-Content 'C:\demo-service\demo-service.log' | Select-Object -Last 5
    } else {
      Write-Host 'Service log file not found at C:\demo-service\demo-service.log'
    }
    "
  register: service_log_check
  changed_when: false

- name: Display recent service log entries
  ansible.builtin.debug:
    msg: "{{ service_log_check.stdout_lines }}"

- name: Password rotation summary
  ansible.builtin.debug:
    msg:
      - "Service account credential update completed successfully"
      - "Service account: {{ service_account }}"
      - "Username from Vault: {{ service_account }}"
      - "Services updated: {{ dependent_services | join(', ') }}"
      - "Host: {{ inventory_hostname }}"
      - "Vault LDAP role: {{ vault_static_role }}"
      - "Last Vault rotation: {{ last_vault_rotation }}"
