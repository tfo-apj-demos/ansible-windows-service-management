---
- name: Comprehensive Windows Service Management
  hosts: windows_servers
  gather_facts: false
  vars:
    # SSH connection for Windows using CMD shell (proven working)
    ansible_connection: ssh
    ansible_shell_type: cmd
    ansible_port: 22
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    operation: "{{ service_operation | default('status') }}"
    target_services: "{{ services_list | default(['DemoHelloWorldService']) }}"
    
  pre_tasks:
    - name: Validate operation parameter
      ansible.builtin.assert:
        that:
          - operation in ['status', 'start', 'stop', 'restart', 'info']
        fail_msg: "Invalid operation. Must be one of: status, start, stop, restart, info"

  tasks:
    - name: Display current operation
      ansible.builtin.debug:
        msg: "Performing {{ operation }} operation on Windows services via SSH"

    - name: Get service status for specific services
      ansible.builtin.raw: |
        powershell.exe -Command "Get-Service -Name '{{ item }}' | Select-Object Name, Status, StartType | ConvertTo-Json"
      loop: "{{ target_services }}"
      register: service_status_results
      when: operation in ['status', 'info']
      changed_when: false

    - name: Display service status in readable format
      ansible.builtin.debug:
        msg: |
          Service: {{ item.item }}
          Status: {{ 'Running' if (item.stdout | from_json).Status == 4 else 'Stopped' if (item.stdout | from_json).Status == 1 else 'Unknown (' + ((item.stdout | from_json).Status | string) + ')' }}
          Start Type: {{ 'Automatic' if (item.stdout | from_json).StartType == 2 else 'Manual' if (item.stdout | from_json).StartType == 3 else 'Disabled' if (item.stdout | from_json).StartType == 4 else 'Unknown (' + ((item.stdout | from_json).StartType | string) + ')' }}
      loop: "{{ service_status_results.results }}"
      when: 
        - operation in ['status', 'info']
        - service_status_results is defined
        - item.stdout is defined

    - name: Start services
      ansible.builtin.raw: |
        powershell.exe -Command "Start-Service -Name '{{ item }}'; Write-Host 'Successfully started service: {{ item }}'"
      loop: "{{ target_services }}"
      register: start_results
      when: operation == 'start'

    - name: Display start results
      ansible.builtin.debug:
        msg: "{{ item.stdout_lines }}"
      loop: "{{ start_results.results }}"
      when: operation == 'start' and start_results is defined

    - name: Stop services
      ansible.builtin.raw: |
        powershell.exe -Command "Stop-Service -Name '{{ item }}' -Force; Write-Host 'Successfully stopped service: {{ item }}'"
      loop: "{{ target_services }}"
      register: stop_results
      when: operation == 'stop'

    - name: Display stop results
      ansible.builtin.debug:
        msg: "{{ item.stdout_lines }}"
      loop: "{{ stop_results.results }}"
      when: operation == 'stop' and stop_results is defined

    - name: Restart services
      ansible.builtin.raw: |
        powershell.exe -Command "Restart-Service -Name '{{ item }}'; Write-Host 'Successfully restarted service: {{ item }}'"
      loop: "{{ target_services }}"
      register: restart_results
      when: operation == 'restart'

    - name: Display restart results
      ansible.builtin.debug:
        msg: "{{ item.stdout_lines }}"
      loop: "{{ restart_results.results }}"
      when: operation == 'restart' and restart_results is defined

    - name: Verify service status after operation
      ansible.builtin.raw: |
        powershell.exe -Command "Get-Service -Name '{{ item }}' | Select-Object Name, Status | ConvertTo-Json"
      loop: "{{ target_services }}"
      register: post_operation_status
      when: operation in ['start', 'stop', 'restart']
      changed_when: false

    - name: Display post-operation status in readable format
      ansible.builtin.debug:
        msg: |
          After {{ operation }}: 
          Service: {{ item.item }}
          Status: {{ 'Running' if (item.stdout | from_json).Status == 4 else 'Stopped' if (item.stdout | from_json).Status == 1 else 'Unknown (' + ((item.stdout | from_json).Status | string) + ')' }}
      loop: "{{ post_operation_status.results }}"
      when: 
        - operation in ['start', 'stop', 'restart']
        - post_operation_status is defined
        - item.stdout is defined

  post_tasks:
    - name: Summary of operations performed
      ansible.builtin.debug:
        msg: 
          - "Service management operation completed"
          - "Operation: {{ operation }}"
          - "Target host: {{ inventory_hostname }}"
          - "Services processed: {{ target_services | join(', ') }}"
